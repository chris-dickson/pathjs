{"name":"path.js","tagline":"A minimal retained mode wrapper with picking support around the Canvas API","body":"**Features:**\r\n - Retained mode\\*: A light \"scene graph\"-style interface for grouping, transforming, drawing, and picking\r\n - SVG path interpolation: give a path object an SVG string and it will be interpolated into lines, beziers, and arcs as necessary\r\n - Picking: All drawn glyphs support DOM-style event listeners for handling mouse input\r\n\r\n\\* Some may argue that retained mode isn't a feature and immediate mode is better suited to canvas-based applications...so what's the point? This is likely true for many cases, particularly for scenes that change significantly from frame-to-frame. However, if retained mode makes sense for your application (such as in [ApertureJS](https://github.com/oculusinfo/aperturejs)) path.js provides a simple abstraction. Think of it as an easy way to record and batch canvas commands to be replayed on demand.\r\n\r\n\r\n### Usage\r\n\r\nBasic usage\r\n```javascript\r\nvar canvas = document.getElementById('my-canvas');\r\nvar scene = path(canvas);\r\n\r\nvar rect = path.rect({\r\n\tx: 100,\r\n\ty: 200,\r\n\twidth: 50,\r\n\theight: 50,\r\n\tstrokeColor: '#777',\r\n\tstrokeWidth: 3\r\n});\r\nscene.add(rect);\r\n\r\nscene.update();\r\n```\r\n\r\n\r\nSVG path support\r\n```javascript\r\n// Draw a 40px diameter ring\r\nvar ring = path.path({\r\n\tpath: 'M-20,0A20,20,0,0,1,20,0A20,20,0,0,1,-20,0ZM-10,0A10,10,0,0,0,10,0A10,10,0,0,0,-10,0Z',\r\n\tfillStyle: '#7ad',\r\n\tstrokeStyle: '#000',\r\n});\r\nscene.add(ring);\r\n\r\nscene.update();\r\n```\r\n\r\n\r\nPicking and associated data\r\n```javascript\r\nrect.data(myDataObj);\r\nrect.on('click', function(e) {\r\n\tconsole.log('My data: ' + e.targetNode.data());\r\n});\r\n```\r\n\r\n\r\nMouse enter/leave detection, modify properties directly\r\n```javascript\r\nrect.on('mouseover', function(e) {\r\n\trect.fillStyle = '#f00';\r\n\tscene.update();\r\n});\r\nrect.on('mouseout', function(e) {\r\n\trect.fillStyle = null;\r\n\tscene.update();\r\n});\r\n```\r\n\r\n\r\nAnimation support for numeric attributes\r\n```javascript\r\nrect.attr({\r\n\tx: 0,\r\n\ty: 0,\r\n\tstrokeWidth: 5\r\n}).tweenAttr({\r\n\tx: 100,\r\n\ty: 100,\r\n\tstrokeWidth: 10\r\n}, {\r\n\tduration: 1000,\r\n\teasing: 'ease-in-out'\r\n});\r\n\r\n// Start all scene animations, update() will be called automatically until animation completes (1 second)\r\nscene.update();\r\n```\r\n\r\n\r\nGroups and basic transform support\r\n```javascript\r\nvar group = path.group({\r\n\tx: -100,\r\n\ty: 200,\r\n\trotation: Math.PI / 4,\r\n\tscaleX: 2,\r\n\tscaleY: 0.5\r\n});\r\nscene.add(group);\r\n\r\ngroup.add(rect);\r\n```\r\n\r\n### License\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Oculus Info Inc.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}